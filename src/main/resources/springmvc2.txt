

    Http 요청 맵핑
        요청 메소드
            HTTP Method
               GET, POST, PUT, PATCH, DELETE, ...

       GET 요청
            - 클라이언트가 서버의 리소스를 요청할 때 사용한다.
            - 캐싱 할 수 있다. (조건적인 GET으로 바뀔 수 있다.)
            - 브라우저 기록에 남는다.
            - 북마크 할 수 있다.
            - 민감한 데이터를 보낼 때 사용하지 말 것. (URL에 다 보이니까)
            - idempotent 멱등 , 동일한 요청 동일한 응답

       POST 요청
            - 클라이언트가 서버의 리소스를 수정하거나 새로 만들 때 사용한다.
            - 서버에 보내는 데이터를 POST 요청 본문에 담는다.
            - 캐시할 수 없다.
            - 브라우저 기록에 남지 않는다.
            - 북마크 할 수 없다.
            - 데이터 길이 제한이 없다.

       PUT 요청
            -  URI에 해당하는 데이터를 새로 만들거나 수정할 때 사용한다.
            - POST와 다른 점은 “URI”에 대한 의미가 다르다.
                 POST의 URI는 보내는 데이터를 처리할 리소스를 지칭하며
                 PUT의 URI는 보내는 데이터에 해당하는 리소스를 지칭한다.
            - Idempotent

       PATCH 요청
            - PUT과 비슷하지만, 기존 엔티티와 새 데이터의 차이점만 보낸다는 차이가 있다. Idempotent

       DELETE 요청
            - URI에 해당하는 리소스를 삭제할 때 사용한다.
            - Idempotent

       스프링 웹 MVC에서 HTTP method 맵핑하기
            - @RequestMapping(method=RequestMethod.GET)
            - @RequestMapping(method={RequestMethod.GET, RequestMethod.POST}) @GetMapping, @PostMapping, ...

       URI 패턴 맵핑
            요청 식별자로 맵핑하기
            @RequestMapping은 다음의 패턴을 지원, Ant style
            https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html
                - ?: 한 글자 (“/author/???” => “/author/123”)
                - *: 여러 글자 (“/author/*” => “/author/keesun”)
                - **: 여러 패스 (“/author/** => “/author/keesun/book”)
            가장 구체적으로 mapping 된 handler 사용한다
            class url 있을 경우
                ex) class "/test"
                    method "/2"
                    일경우  ==>  /test/2가 된다

       컨텐츠 타입 매핑
            특정한 타입의 데이터를 담고 있는 요청만 처리하는 핸들러 consumes 사용
                Content-Type 헤더로 필터링
                매치 되는 않는 경우에 415 Unsupported Media Type 응답

            특정한 타입의 응답을 만드는 핸들러 produces
                 Accept 헤더로 필터링
                 매치 되지 않는 경우에 406 Not Acceptable 응답

            class 에도 정의 가능 class와 method 둘다 있을 경우 method override

       헤더와 파라미터 맵핑
           특정한 헤더가 있는 요청을 처리하고 싶은 경우
                @RequestMapping(headers = “key”)
           특정한 헤더가 없는 요청을 처리하고 싶은 경우
                @RequestMapping(headers = “!key”)
           특정한 헤더 키/값이 있는 요청을 처리하고 싶은 경우
                @RequestMapping(headers = “key=value”)
           특정한 요청 매개변수 키를 가지고 있는 요청을 처리하고 싶은 경우
                @RequestMapping(params = “a”)
           특정한 요청 매개변수가 없는 요청을 처리하고 싶은 경우
                @RequestMapping(params = “!a”)
           특정한 요청 매개변수 키/값을 가지고 있는 요청을 처리하고 싶은 경우
                @RequestMapping(params = “a=b”)

       HEAD와 OPTIONS 요청 처리
            우리가 구현하지 않아도 스프링 웹 MVC에서 자동으로 처리하는 HTTP Method

            HEAD
                GET 요청과 동일하지만 응답 본문을 받아오지 않고 응답 헤더만 받아온다.
            OPTIONS
                사용할 수 있는 HTTP Method 제공
                서버 또는 특정 리소스가 제공하는 기능을 확인할 수 있다.
                서버는 Allow 응답 헤더에 사용할 수 있는 HTTP Method 목록을 제공해야 한다.

       커스텀 애노테이션
            메타(Meta) 애노테이션
                - 애노테이션에 사용할 수 있는 애노테이션
                - 스프링이 제공하는 대부분의 애노테이션은 메타 애노테이션으로 사용할 수 있다.
            조합(Composed) 애노테이션
                - 한개 혹은 여러 메타 애노테이션을 조합해서 만든 애노테이션
                - 코드를 간결하게 줄일 수 있다.
                - 보다 구체적인 의미를 부여할 수 있다.

   핸들러 메소드
       https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-returntypes
       PushBuilder / Http/2 리소스 푸쉬에 사용한다
            원래는 브라우저가 이미지를 여는 순간 리소스 이미지를 서버에게 요청을 보내지만 PushBuilder의 경우는 처음 요청에 능동적으로 리소스를 보낸다.
            따라서 브라우저가 리소스 요청을 하지 않아도 되므로 시간이 좀더 단축된다

       애노테이션 기반이 가장 많이 쓰인다

        uri 패턴
            @PathVariable

            @MatrixVariable

        요청 매개변수
            쿼리 매개변수 ex) url?name=seo
            폼 데이터 key, value 쌍

            @RequestParam

            폼 서브밋

            @ModelAttribute
                요청 매개변수에 들어있는 단순 타입 데이터를 메소드 아규먼트로 받아올 수 있다.

            @SessionAttributes http session
                클래스 안에 model 이름에 해당하는 것 세션에 넣어주는 것
            멀티 폼 서브밋

            @SessionAttribute
                컨트롤러 밖에서 필터나 인터셉터에서도 사용가능

            RedirectAttributes
                리다이렉트 할 때 기본적으로 Model에 들어있는 primitive type 데이터는 URI 쿼리 매개변수에 추가된다.
                스프링 부트에서는 이 기능이 기본적으로 비활성화 되어 있다.
                Ignore-default-model-on-redirect 프로퍼티를 사용해서 활성화 할 수 있다.

            @PathVariable : path에서
            @RequestParam : query나 form에서

            FlashAttributes
                주로 리다이렉트에 데이터 전달 시 사용한다
                    데이터가 URI에 노출되지 않는다.
                    임의의 객체를 저장할 수 있다.
                    보통 HTTP 세션을 사용한다.

            MultipartFile
                MultipartFile
                    파일 업로드시 사용하는 메소드 아규먼트
                        MultipartResolver 빈이 설정 되어 있어야 사용할 수 있다. (스프링 부트 자동 설정이 해 줌) ● POST multipart/form-data 요청에 들어있는 파일을 참조할 수 있다.
                        List<MultipartFile> 아큐먼트로 여러 파일을 참조할 수도 있다.

                    디스패처 서블릿에서 MultipartResolver init
                    따라서 MultipartResolver 빈이 설정되어 있어야 한다 (스프링 부트 자동 설정)
                    Spring Boot MultipartAutoConfiguration 자동 설정 파일에서 설정된다


                    파일 다운로드
                         스프링 ResourceLoader 사용하기

                         파일 다운로드 응답 헤더에 설정할 내용
                            Content-Disposition: 사용자가 해당 파일을 받을 때 사용할 파일 이름
                            Content-Type: 어떤 파일인가
                            Content-Length: 얼마나 큰 파일인가

                        ResponseEntity (return type)
                            응답 상태 코드, 응답 헤더, 응답 본문 설정할 수 있음

            @RequestBody & HttpEntity

                HttpMessageConverter
                    스프링 MVC 설정 (WebMvcConfigurer)에서 설정할 수 있다.
                    configureMessageConverters: 기본 메시지 컨버터 대체
                    extendMessageConverters: 메시지 컨버터에 추가


                @RequestBody
                    요청 본문(body)에 들어있는 데이터를 HttpMessageConveter를 통해 변환한 객체로 받아올 수 있다.
                    @Valid 또는 @Validated를 사용해서 값을 검증 할 수 있다.
                    BindingResult 아규먼트를 사용해 코드로 바인딩 또는 검증 에러를 확인할 수 있다.

                HttpEntity
                    @RequestBody와 비슷하지만 추가적으로 요청 헤더 정보를 사용할 수 있다.

           @ResponseBody & ResponseEntity
                @ResponseBody
                    데이터를 HttpMessageConverter를 사용해 응답 본문 메시지로 보낼 때 사용한다.
                    @RestController 사용시 자동으로 모든 핸들러 메소드에 적용 된다.

                ResponseEntity
                    응답 헤더 상태 코드 본문을 직접 다루고 싶은 경우에 사용한다.

           @ModelAttribute 또 다른 사용법
                @RequestMapping을 사용한 핸들러 메소드의 아규먼트에 사용하기
                @Controller 또는 @ControllerAdvice 사용한 클래스에서 모델 정보를 초기화 할 때 사용한다
                @RequestMapping과 같이 사용하면 해당 메소드에서 리턴하는 객체를 모델에 넣어 준다.
                    -RequestToViewNameTranslator

           DataBinder: @InitBinder
                특정 컨트롤러에서 바인딩 또는 검증 설정을 변경하고 싶을 때 사용

           예외 처리 핸들러: @ExceptionHandler
                특정 예외가 발생한 요청을 처리하는 핸들러 정의
                    지원하는 메소드 아규먼트 (해당 예외 객체, 핸들러 객체, ...)
                    지원하는 리턴 값
                    REST API의 경우 응답 본문에 에러에 대한 정보를 담아주고, 상태 코드를 설정하려면 ResponseEntity를 주로 사용한다.

           전역 컨트롤러: @(Rest)ControllerAdvice
                예외 처리, 바인딩 설정, 모델 객체를 모든 컨트롤러 전반에 걸쳐 적용하고 싶은 경우에 사용한다.
                    @ExceptionHandler
                    @InitBinder
                    @ModelAttributes
                적용할 범위를 지정할 수도 있다.
                    특정 애노테이션을 가지고 있는 컨트롤러에만 적용하기
                    특정 패키지 이하의 컨트롤러에만 적용하기
                    특정 클래스 타입에만 적용하기



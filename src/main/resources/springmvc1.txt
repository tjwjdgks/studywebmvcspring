spring web mvc 동작 원리
    M: 모델, V: 뷰, C: 컨트롤러
    장점
        낮은 의존도- 뷰, 모델, 컨트롤러 각각 독립적
    모델: 평범한 자바 객체 POJO
    뷰: HTML. JSP, 타임리프, ...
    컨트롤러: 스프링 @MVC
    모델: 도메인 객체 또는 DTO로 화면에 전달할 또는 화면에서 전달 받은 데이터를 담고 있는 객체
    뷰: 데이터를 보여주는 역할. 다양한 형태로 보여줄 수 있다. HTML, JSON, XML, ...
    컨트롤러: 사용자 입력을 받아 모델 객체의 데이터를 변경하거나, 모델 객체를 뷰에 전달하는 역할.
        - 입력값 검증
        - 입력 받은 데이터로 모델 객체 변경
        - 변경된 모델 객체를 뷰에 전달

    서블릿
        서블릿 (Servlet)
            자바 엔터프라이즈 에디션은 웹 애플리케이션 개발용 스팩과 API 제공.
            요청 당 쓰레드 (만들거나, 풀에서 가져다가) 사용
            그 중에 가장 중요한 클래스중 하나가 HttpServlet. (가장 핵심적인 class)

        이전 사용 기술 CGI (Common Gateway Interface)
            요청 당 프로세스를 만들어 사용

        서블릿의 장점 (CGI에 비해)
            빠르다, 플랫폼 독립적, 보안, 이식성

        서블릿 엔진 또는 서블릿 컨테이너 (톰캣, 제티, 언더토, ...)
             서블릿 에플리케이션은 기본적으로 직접 실행할 수 없다, 서블릿 컨테이너가 실행 할 수 있음
            세션 관리, 네트워크 서비스, MIME 기반 메시지 인코딩 디코딩, 서블릿 생명주기 관리, ...

        서블릿 생명주기
            서블릿 컨테이너가 서블릿 인스턴스의 init() 메소드를 호출하여 초기화 한다.
                -최초 요청을 받았을 때 한번 초기화 하고 나면 그 다음 요청부터는 이 과정을 생략한다.

            서블릿이 초기화 된 다음부터 클라이언트의 요청을 처리할 수 있다. 각 요청은 별도의 쓰레드로 처리하고
            이때 서블릿 인스턴스의 service() 메소드를 호출한다.
                -이 안에서 HTTP 요청을 받고 클라이언트로 보낼 HTTP 응답을 만든다.
                -service()는 보통 HTTP Method에 따라 doGet(), doPost() 등으로 처리를 위임한다.
                -따라서 보통 doGet() 또는 doPost()를 구현한다.

             서블릿 컨테이너 판단에 따라 해당 서블릿을 메모리에서 내려야 할 시점에 destroy()를 호출한다

        서블릿 프로그래밍
            servlet pom.xml에서 java servlet api // provided는 package 할 때 빠지고 서블릿 container에서 제공된다
            서블릿 클래스 HttpServlet 상속 받아야한다

            서블릿 Context
                서블릿과 컨테이너의 연동을 위해 사용한다
                서블릿을 관리하는 설정 서블릿 Context
                하나의 application에 하나의 서블릿 컨텍스트 존재

                컨텍스트 : 메모리에 로딩된 정보 덩어리
                    단순한 메모리 정보가 아닌 서로 연관성을 갖는 정보끼리의 묶음
                    ex) 서블릿 컨텍스트. 메모리에 로딩될때 연결되고 포함한 각종 설정 정보 및 변수, 함수들이 서블릿 바운더리
                    내에서 이해할 수 있는 묶음으로 메모리에 올라온다. 이는 jvm이 이해할 수 있는 정보묶음 영역
            서블릿 리스너
                웹 애플리케이션에서 발생하는 주요 이벤트를 감지하고 각 이벤트에 특별한 작업이 필요한 경우에 사용할 수 있다.
                    서블릿 컨텍스트 수준의 이벤트
                        - 컨텍스트 라이프사이클 이벤트
                        - 컨텍스트 애트리뷰트 변경 이벤트
                     세션 수준의 이벤트
                        - 세션 라이프사이클 이벤트
                        - 세션 애트리뷰트 변경 이벤트
            서블릿 필터
                들어온 요청을 서블릿으로 보내고, 또 서블릿이 작성한 응답을 클라이언트로 보내기 전에
                특별한 처리가 필요한 경우에 사용할 수 있다.
                컨테이너에서 요청을 받으면 서블릿으로 바로 가는 것이 아니라 필터를 거쳐 간다

                체인 형태의 구조
                    순차적으로 적용되는 구조, 따라서 다음 체인으로 갈 수 있게 구현해야 한다
                https://docs.oracle.com/cd/B14099_19/web.1012/b14017/filters.htm#i1000654

            스프링 MVC 연동
                https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc
                서블릿 애플리케이션에 스프링 연동하기
                    서블릿에서 스프링이 제공하는 IoC 컨테이너 활용하는 방법
                        ContextLoaderListener가 application context 등록해준다
                    스프링이 제공하는 서블릿 구현체 DispatcherServlet 사용하기
                        디스패처 서블릿은 서블릿 context에 등록되어있는 application context(root webapplication context)를
                        상속받는 servlet webapplcication context를 하나 더 만든다
                        root app context는 다른 서블릿에서 사용가능, but 디스패처가 만든 app context는 디스패처 안에서
                DispatcherServlet
                    스프링 MVC의 핵심.
                    Front Controller 역할을 한다

                    기본적으로 등록해주는 핸들러
                        bean name 핸들러
                        request mapping 핸들러 : 지정한 request의 핸들러를 찾아주는 역할

                    DispatcherServlet 초기화
                        다음의 특별한 타입의 빈들을 찾거나, 기본 전략에 해당하는 빈들을 등록한다.
                        HandlerMapping: 핸들러를 찾아주는 인터페이스
                        HandlerAdapter: 핸들러를 실행하는 인터페이스
                        HandlerExceptionResolver
                        ViewResolver
                        ...
                    DispatcherServlet 동작 순서
                        1. 요청을 분석한다. (로케일, 테마, 멀티파트 등)
                        2. (핸들러 맵핑에게 위임하여) 요청을 처리할 핸들러를 찾는다.
                        3. (등록되어 있는 핸들러 어댑터 중에) 해당 핸들러를 실행할 수 있는 “핸들러 어댑터”를 찾는다.
                        4. 찾아낸 “핸들러 어댑터”를 사용해서 핸들러의 응답을 처리한다.
                            - 핸들러의 리턴값을 보고 어떻게 처리할지 판단한다.
                            - 뷰 이름에 해당하는 뷰를 찾아서 모델 데이터를 랜더링한다.
                            - @ResponseBody가 있다면 Converter를 사용해서 응답 본문을 만들다.
                        5. (부가적으로) 예외가 발생했다면, 예외 처리 핸들러에 요청 처리를 위임한다.
                        6. 최종적으로 응답을 보낸다.

                    HandlerMapping
                        - RequestMappingHandlerMapping
                    HandlerAdapter
                        - RequestMappingHandlerAdapte

                    모델이 있을 경우 ModelAndView null 아님

                    DispatcherServlet 구성 요소
                     DispatcherSerlvet의 기본 전략
                        DispatcherServlet.properties

                     MultipartResolver
                        파일 업로드 요청 처리에 필요한 인터페이스
                        HttpServletRequest를 MultipartHttpServletRequest로 변환해주어 요청이 담고 있는 File을 꺼낼 수 있는 API 제공.

                     LocaleResolver
                        클라이언트의 위치(Locale) 정보를 파악하는 인터페이스
                        기본 전략은 요청의 accept-language를 보고 판단.

                     ThemeResolver
                        애플리케이션에 설정된 테마를 파악하고 변경할 수 있는 인터페이스
                        참고: https://memorynotfound.com/spring-mvc-theme-switcher-example/

                     HandlerMapping
                        요청을 처리할 핸들러를 찾는 인터페이스

                     HandlerAdapter
                        HandlerMapping이 찾아낸 “핸들러”를 처리하는 인터페이스
                        스프링 MVC 확장력의 핵심

                     HandlerExceptionResolver
                        요청 처리 중에 발생한 에러 처리하는 인터페이스

                     RequestToViewNameTranslator
                        핸들러에서 뷰 이름을 명시적으로 리턴하지 않은 경우, 요청을 기반으로 뷰 이름을 판단하는 인터페이스

                     ViewResolver
                        뷰 이름(string)에 해당하는 뷰를 찾아내는 인터페이스

                     FlashMapManager
                        FlashMap 인스턴스를 가져오고 저장하는 인터페이스
                        FlashMap은 주로 리다이렉션을 사용할 때 요청 매개변수를 사용하지 않고 데이터를 전달하고 정리할 때 사용한다.
                        redirect:/events

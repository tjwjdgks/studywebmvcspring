spring web mvc 동작 원리
    M: 모델, V: 뷰, C: 컨트롤러
    장점
        낮은 의존도- 뷰, 모델, 컨트롤러 각각 독립적
    모델: 평범한 자바 객체 POJO
    뷰: HTML. JSP, 타임리프, ...
    컨트롤러: 스프링 @MVC
    모델: 도메인 객체 또는 DTO로 화면에 전달할 또는 화면에서 전달 받은 데이터를 담고 있는 객체
    뷰: 데이터를 보여주는 역할. 다양한 형태로 보여줄 수 있다. HTML, JSON, XML, ...
    컨트롤러: 사용자 입력을 받아 모델 객체의 데이터를 변경하거나, 모델 객체를 뷰에 전달하는 역할.
        - 입력값 검증
        - 입력 받은 데이터로 모델 객체 변경
        - 변경된 모델 객체를 뷰에 전달

    서블릿
        서블릿 (Servlet)
            자바 엔터프라이즈 에디션은 웹 애플리케이션 개발용 스팩과 API 제공.
            요청 당 쓰레드 (만들거나, 풀에서 가져다가) 사용
            그 중에 가장 중요한 클래스중 하나가 HttpServlet. (가장 핵심적인 class)

        이전 사용 기술 CGI (Common Gateway Interface)
            요청 당 프로세스를 만들어 사용

        서블릿의 장점 (CGI에 비해)
            빠르다, 플랫폼 독립적, 보안, 이식성

        서블릿 엔진 또는 서블릿 컨테이너 (톰캣, 제티, 언더토, ...)
             서블릿 에플리케이션은 기본적으로 직접 실행할 수 없다, 서블릿 컨테이너가 실행 할 수 있음
            세션 관리, 네트워크 서비스, MIME 기반 메시지 인코딩 디코딩, 서블릿 생명주기 관리, ...

        서블릿 생명주기
            서블릿 컨테이너가 서블릿 인스턴스의 init() 메소드를 호출하여 초기화 한다.
                -최초 요청을 받았을 때 한번 초기화 하고 나면 그 다음 요청부터는 이 과정을 생략한다.

            서블릿이 초기화 된 다음부터 클라이언트의 요청을 처리할 수 있다. 각 요청은 별도의 쓰레드로 처리하고
            이때 서블릿 인스턴스의 service() 메소드를 호출한다.
                -이 안에서 HTTP 요청을 받고 클라이언트로 보낼 HTTP 응답을 만든다.
                -service()는 보통 HTTP Method에 따라 doGet(), doPost() 등으로 처리를 위임한다.
                -따라서 보통 doGet() 또는 doPost()를 구현한다.

             서블릿 컨테이너 판단에 따라 해당 서블릿을 메모리에서 내려야 할 시점에 destroy()를 호출한다

        서블릿 프로그래밍
            servlet pom.xml에서 java servlet api // provided는 package 할 때 빠지고 서블릿 container에서 제공된다
            서블릿 클래스 HttpServlet 상속 받아야한다

            서블릿 Context
                서블릿과 컨테이너의 연동을 위해 사용한다
                서블릿을 관리하는 설정 서블릿 Context
                하나의 application에 하나의 서블릿 컨텍스트 존재

                컨텍스트 : 메모리에 로딩된 정보 덩어리
                    단순한 메모리 정보가 아닌 서로 연관성을 갖는 정보끼리의 묶음
                    ex) 서블릿 컨텍스트. 메모리에 로딩될때 연결되고 포함한 각종 설정 정보 및 변수, 함수들이 서블릿 바운더리
                    내에서 이해할 수 있는 묶음으로 메모리에 올라온다. 이는 jvm이 이해할 수 있는 정보묶음 영역
            서블릿 리스너
                웹 애플리케이션에서 발생하는 주요 이벤트를 감지하고 각 이벤트에 특별한 작업이 필요한 경우에 사용할 수 있다.
                    서블릿 컨텍스트 수준의 이벤트
                        - 컨텍스트 라이프사이클 이벤트
                        - 컨텍스트 애트리뷰트 변경 이벤트
                     세션 수준의 이벤트
                        - 세션 라이프사이클 이벤트
                        - 세션 애트리뷰트 변경 이벤트
            서블릿 필터
                들어온 요청을 서블릿으로 보내고, 또 서블릿이 작성한 응답을 클라이언트로 보내기 전에
                특별한 처리가 필요한 경우에 사용할 수 있다.
                컨테이너에서 요청을 받으면 서블릿으로 바로 가는 것이 아니라 필터를 거쳐 간다

                체인 형태의 구조
                    순차적으로 적용되는 구조, 따라서 다음 체인으로 갈 수 있게 구현해야 한다
                https://docs.oracle.com/cd/B14099_19/web.1012/b14017/filters.htm#i1000654
            
